<?php

namespace app\modules\eoffice_materialsys\controllers;

use app\modules\eoffice_materialsys\models\FunDate;
use app\modules\eoffice_materialsys\models\MatsysLocation;
use app\modules\eoffice_materialsys\models\MatsysMaterialType;
use app\modules\eoffice_materialsys\models\MatsysOrder;
use app\modules\eoffice_materialsys\models\MatsysOrderDetail;
use app\modules\eoffice_materialsys\models\MatsysOrderHasMaterial;
use app\modules\eoffice_materialsys\models\PdfFile;
use app\modules\eoffice_materialsys\models\User;
use Yii;
use yii\data\Pagination;
use yii\db\Exception;
use yii\elasticsearch\Query;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use app\modules\eoffice_materialsys\models\Uploadxml;

use app\modules\eoffice_materialsys\components\thsplitlib\segment;

use app\modules\eoffice_materialsys\models\MatsysBillMaster;
use app\modules\eoffice_materialsys\models\MatsysMaterial;
use app\modules\eoffice_materialsys\models\MatsysBillDetail;
use app\modules\eoffice_materialsys\models\MatsysCompany;
use app\modules\eoffice_materialsys\models\elasticsearchMaterial;


class InsertmaterialfileController extends Controller
{
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action);
    }

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        //\Yii::setAlias('@path_assetmodule', '@web/../modules/materialmanagement/assets');
        //\Yii::setAlias('@path_component', '@web/../modules/materialmanagement/components/');
    }

    public function actionIndex()
    {
        return $this->redirect(['insertmaterialfile/upload']);
    }

    public function actionUpload()
    {
        $path_name = "../web/web_mat/xml/";
        $path_name_pdf = "../web/web_mat/pdf/temp/";
        $file = scandir($path_name);
        foreach ($file as $key => $value) {
            if ($key >= 2) {
                unlink($path_name . $value);
            }
        }
        $file = scandir($path_name_pdf);
        foreach ($file as $key => $value) {
            if ($key >= 2) {
                unlink($path_name_pdf . $value);
            }
        }
        $modelxml = new Uploadxml();
        return $this->render('index', ['model' => $modelxml]);
    }

    public function actionUpfile()
    {
        $fileName = 'file';
        $uploadPath = '../web/web_mat/xml/';
        $session = Yii::$app->session;
        $session->open();

        if (isset($_FILES[$fileName])) {
            $file = \yii\web\UploadedFile::getInstanceByName($fileName);

            if ($file->saveAs($uploadPath . '/' . $file->name)) {
                //Now save file data to database
                echo \yii\helpers\Json::encode($file);
            }
        }
        return false;
    }

    public function actionUpfilepdf()
    {
        $fileName = 'file';
        $uploadPath = '../web/web_mat/pdf/temp/';
        $session = Yii::$app->session;
        $session->open();

        if (isset($_FILES[$fileName])) {
            $file = \yii\web\UploadedFile::getInstanceByName($fileName);

            if ($file->saveAs($uploadPath . '/' . $file->name)) {
                //Now save file data to database
                echo \yii\helpers\Json::encode($file);
            }
        }
        return false;
    }

    public function actionDeletexml()
    {
        $this->enableCsrfValidation = false;
        $filename = Yii::$app->request->post('filename');
        $path_name = "../web/web_mat/xml/" . $filename;
        if (unlink($path_name)) {
            echo "success";
        } else {
            echo "fail";
        }

    }

    public function actionRenderxml()
    {
        $this->layout = false;
        $path_name = "../web/web_mat/xml/";
        $file = scandir($path_name);
        $count = 0;
        $countarray = '';
        $countmat = '';
        $content = [];
        $model_company = ArrayHelper::map(MatsysCompany::find()->all(), 'company_id', 'company_name');
        foreach ($file as $key => $value) {
            if ($key >= 2) {
                $pathfile = "../web/web_mat/xml/" . $value;

                // Covert to UTF-8
//                $covertfile = file_get_contents($pathfile);
//                $finalfile = iconv(mb_detect_encoding($covertfile, mb_detect_order(), true), "utf-8", $covertfile);

                $covertfile = file_get_contents($pathfile);
                file_put_contents($pathfile, iconv(mb_detect_encoding($covertfile, mb_detect_order(), true), 'UTF-8', file_get_contents($pathfile)));
                $covertfile = file_get_contents($pathfile);

                $xml = simplexml_load_string($covertfile);

                $result_date = $xml->xpath('//RECEIPT_DATE');
                $result_id = $xml->xpath('//RECEIPT_NO');
                $result_book = $xml->xpath('//RECEIPT_BOOK');
                $result_receive = $xml->xpath('//RECEIVE_NO');
                $result_ref = $xml->xpath('//REF_NO');
                $result_company = $xml->xpath('//AP_NAME');
                $result_items = $xml->xpath('//G_PRODUCT_NAME');
                $check = MatsysBillMaster::find()
                    ->where('bill_master_id = :bill_master_id',[':bill_master_id'=>$result_id[0][0]])
                    ->one();

                if(!$check){

                    $bill_mater = new MatsysBillMaster();
                    $bill_mater['bill_master_id'] = $result_id[0][0];
                    $bill_mater['bill_master_date'] = $result_date[0][0];
                    $bill_mater['bill_mater_record'] = $result_ref[0][0];
                    $bill_mater['bill_master_check'] = $result_receive[0][0];
                    $bill_mater['bill_master_id_no'] = $result_book[0][0];

                    $pdf = new PdfFile();
                    $allMaterial = 0;
                    foreach ($result_items as $model) {
                        $countmat .= "-" . $count . "-" . $allMaterial . "+";
                        $allMaterial++;
                    }

                    $item = [
                        'model_bill_master' => $bill_mater,
                        'model_pdf' => $pdf,
                        'count' => $count,
                        'items' => $result_items,
                        'model_company' => $model_company
                    ];
                    array_push($content, $item);
                    $countarray .= $count . '/';
                    $count++;
                    $countmat .= '/';
                }
            }
        }
        return $this->render('_obj_xmlfile', [
            'content' => $content,
            'countarray' => $countarray,
            'countmat' => $countmat
        ]);
    }

    public function actionConfirmmaterial()
    {
        try {
            $bill_master = Yii::$app->request->post('bill_masters');
            $path_name = "../web/web_mat/pdf/temp/";
            $path_success_name = "../web/web_mat/pdf/success/";
            $filepdf = null;
            foreach ($bill_master as $key => $value) {
                $bill_master_model = new MatsysBillMaster();
                $bill_master_model->bill_master_id = $value['bill_master_id'];
                $bill_master_model->bill_master_date = $value['bill_master_date'];
                $bill_master_model->bill_mater_record = $value['bill_mater_record'];
                $bill_master_model->bill_master_check = $value['bill_master_check'];
                $bill_master_model->bill_master_id_no = $value['bill_master_id_no'];
                $bill_master_model->bill_master_pdf = $value['bill_master_id'];
                $bill_master_model->company_id = $value['company_id'];
                $file = scandir($path_name);
                foreach ($file as $key_f => $value_f) {
                    if ($key_f >= 2) {
                        if ($value_f == $value['bill_master_pdf'])
                            $filepdf = $value_f;
                    }
                }
                $new_pdf = $value['bill_master_id'];
                copy($path_name . $filepdf, $path_success_name . $new_pdf . '.pdf');
                $bill_master_model->save(false);
                foreach ($value['materials'] as $key2 => $value2) {
                    $counter_temp = MatsysBillDetail::find()
                        ->where('material_id LIKE :value', [':value' => $value2['material_id']])
                        ->orderBy(['bill_detail_counter' => SORT_DESC])
                        ->one();
                    $count = 0;
                    if ($counter_temp != null) {
                        $count = $counter_temp['bill_detail_counter'] + 1;
                    }
                    $bill_deteil_model = new MatsysBillDetail();
                    $bill_deteil_model->material_id = $value2['material_id'];
                    $bill_deteil_model->bill_master_id = $value['bill_master_id'];
                    $bill_deteil_model->bill_detail_price_per_unit = $value2['bill_detail_price_per_unit'];
                    $bill_deteil_model->bill_detaill_amount = $value2['bill_detaill_amount'];
                    $bill_deteil_model->bill_detail_use_amount = $value2['bill_detail_use_amount'];
                    $bill_deteil_model->bill_detail_counter = $count;
                    $bill_deteil_model->save(false);
                }
            };
            echo "pass";
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }
    public function actionConfirmmaterial_pass()
    {
        try {
            $bill_master = Yii::$app->request->post('bill_masters');
            $path_name = "../web/web_mat/pdf/temp/";
            $path_success_name = "../web/web_mat/pdf/success/";
            $filepdf = null;
            foreach ($bill_master as $key => $value) {
                $bill_master_model = new MatsysBillMaster();
                $bill_master_model->bill_master_id = $value['bill_master_id'];
                $bill_master_model->bill_master_date = $value['bill_master_date'];
                $bill_master_model->bill_mater_record = $value['bill_mater_record'];
                $bill_master_model->bill_master_check = $value['bill_master_check'];
                $bill_master_model->bill_master_id_no = $value['bill_master_id_no'];
                $bill_master_model->bill_master_pdf = $value['bill_master_id'];
                $bill_master_model->company_id = $value['company_id'];

                $person_id = $value['user_id'];
                $model_detail_order = new MatsysOrderDetail();
                $model_detail_order->order_detail_id = FunDate::genOrderdetailid($person_id);
                $model_detail_order->order_detail = $value['order_detail'];
                $model_detail_order->order_detail_name = $value['order_detail_name'];
                $model_detail_order->order_detail_name_id = $value['order_detail_name_id'];
                $model_detail_order->detail_id = $value['detail_id'];
                $model_detail_order->save(false);

                date_default_timezone_set("Asia/Bangkok");
                $date = date('Y-m-d G:i:s');
                $person_ap = Yii::$app->user->identity->getId();

                $model_order = new MatsysOrder();
                $model_order->order_id = FunDate::genBillId($person_id);
                $model_order->person_id = $person_id;
                $model_order->order_date = $date;
                $model_order->order_staff = $person_ap;
                $model_order->order_status = '1';
                $model_order->order_status_confirm = 'confirm';
                $model_order->order_status_notification = 'notread';
                $model_order->order_status_return = '0';
                $model_order->order_budget_per_year = FunDate::getBudgetyear();
                $model_order->order_cancel_description = '-';
                $model_order->order_detail_id = $model_detail_order->order_detail_id;
                $model_order->save(false);

                $file = scandir($path_name);
                foreach ($file as $key_f => $value_f) {
                    if ($key_f >= 2) {
                        if ($value_f == $value['bill_master_pdf'])
                            $filepdf = $value_f;
                    }
                }
                $new_pdf = $value['bill_master_id'];
                copy($path_name . $filepdf, $path_success_name . $new_pdf . '.pdf');
                $bill_master_model->save(false);
                foreach ($value['materials'] as $key2 => $value2) {
                    $counter_temp = MatsysBillDetail::find()
                        ->where('material_id LIKE :value', [':value' => $value2['material_id']])
                        ->orderBy(['bill_detail_counter' => SORT_DESC])
                        ->one();
                    $count = 0;
                    if ($counter_temp != null) {
                        $count = $counter_temp['bill_detail_counter'] + 1;
                    }
                    $model_order_items = MatsysOrder::find()
                        ->where('order_id = :order_id',[':order_id'=>$model_order->order_id])
                        ->one();
                    $bill_deteil_model = new MatsysBillDetail();
                    $bill_deteil_model->material_id = $value2['material_id'];
                    $bill_deteil_model->bill_master_id = $value['bill_master_id'];
                    $bill_deteil_model->bill_detail_price_per_unit = $value2['bill_detail_price_per_unit'];
                    $bill_deteil_model->bill_detaill_amount = $value2['bill_detaill_amount'];
                    $bill_deteil_model->bill_detail_use_amount = 0;
                    $bill_deteil_model->bill_detail_counter = $count;
                    $bill_deteil_model->save(false);

                    $item = new MatsysOrderHasMaterial();
                    $item->material_amount = $value2['bill_detaill_amount'];
                    $item->material_amount_receive = $value2['bill_detaill_amount'];
                    $item->order_id_ai = $model_order_items->order_id_ai;
                    $item->order_id = $model_order_items->order_id;
                    $item->material_id = $value2['material_id'];
                    $item->bill_master_id = $bill_master_model->bill_master_id;
                    $item->save(false);
                }
            };
            echo "pass";
        } catch (Exception $e) {
            echo $e->getMessage();
        }
    }

    public function actionCheckfile()
    {
        $path_name = "../web/web_mat/xml/";
        $file = scandir($path_name);
        foreach ($file as $key => $value) {
            if ($key >= 2) {
                return true;
                break;
            }
        }
        return false;
    }

    //ElasticSearch
    public function actionElasticsearch()
    {
        $string_base = \Yii::$app->request->get("str");
        $material = $this->similarity($string_base);
        foreach ($material as $key => $model) {
            echo $key . "=>" . $model;
        }
    }

    public function actionView()
    {
        $session = Yii::$app->session;
        $sessionfile = $session['sessionfile'];
        foreach ($sessionfile as $item) {
            echo $item;
        }
    }

    // PHP function
    public function similarity($string_base)
    {
        $result_similarity = [];
        $sql = "";
        $String_split = $this->split($string_base);
        $numItems = count($String_split);
        foreach ($String_split as $keyloop => $value) {
            if ($keyloop === $numItems - 1) {
                $sql = $sql . "material_name LIKE '%" . "$value" . "%'";
            } else {
                $sql = $sql . "material_name LIKE '%" . "$value" . "%' OR ";
            }
        }
        $material = \Yii::$app->get('db_mat')->createCommand('SELECT * FROM matsys_material WHERE ' . $sql)->queryAll();

        foreach ($material as $key => $model) {
            similar_text($string_base, $model['material_name'], $sim);
            $result_similarity = array_merge($result_similarity, array($model["material_name"] => $sim));
        }
        arsort($result_similarity);
        return $result_similarity;
    }

    // My Split
    public function split($string_base)
    {
        $segment = new Segment();
        $result = $segment->get_segment_array($string_base);
        return $result;
    }

    //Ajax search Material when input JSON
    public function actionSearchmaterialajax()
    {
        if (\Yii::$app->request->get()) {
            $value = \Yii::$app->request->get("value");
            if (!isset($value)) {
                $value = "------";
            }
            $ajaxresulall = [];
            $resultnot = $value;
            $value = "%" . $value . "%";
            $result = MatsysMaterial::find()->where('material_name LIKE :value', [':value' => $value])->limit(10)->all();


            //JSON
//            echo json_encode($result[0]['material_name']);
            if ($result) {
                foreach ($result as $obj) {
                    $type = MatsysMaterialType::findOne($obj["material_type_id"]);
                    $location = MatsysLocation::findOne($obj["location_id"]);
                    $json_location = [
                        'location_id' => $location['location_id'],
                        'location_name' => $location['location_name']
                    ];
                    $json_type = [
                        'material_type_id' => $type["material_type_id"],
                        'material_type_name' => $type["material_type_name"]
                    ];
                    $ajaxresul_obj = [
                        'id' => $obj["material_id"],
                        'material_name' => $obj["material_name"],
                        'material_amount_check' => $obj["material_amount_check"],
                        'material_order_count' => $obj["material_order_count"],
                        'material_unit_name' => $obj["material_unit_name"],
                        'material_image' => $obj["material_image"],
                        'location' => $json_location,
                        'material_type' => $json_type,
                    ];
                    array_push($ajaxresulall, $ajaxresul_obj);
                }
                $ajaxresult = ['resultajax' => $ajaxresulall];
                return json_encode($ajaxresult, JSON_UNESCAPED_UNICODE);
            } else {
                echo "<option id=\"notFound\" class='option' value=\"ไม่พบข้อมูล'" . $resultnot . "'\" />";
            }

        } else {
            return "false method not post";
        }
    }

    //Ajax search Material when input JSON
    public function actionSearchuserjax()
    {
        if (\Yii::$app->request->get()) {
            $value = \Yii::$app->request->get("value");
            if (!isset($value)) {
                $value = "------";
            }
            $ajaxresulall = [];
            $resultnot = $value;
            $value = "%" . $value . "%";
            $result = User::find()
                ->where('id LIKE :value', [':value' => $value])
                ->orWhere('person_fname_th LIKE :value', [':value' => $value])
                ->orWhere('person_lname_th LIKE :value', [':value' => $value])
                ->limit(10)->all();


            //JSON
            if ($result) {
                foreach ($result as $obj) {
                    $ajaxresul_obj = [
                        'id' => $obj["id"],
                        'user_name' => $obj["PREFIXNAME"] . $obj["person_fname_th"] . " " . $obj["person_lname_th"],
                    ];
                    array_push($ajaxresulall, $ajaxresul_obj);
                }
                $ajaxresult = ['resultajax' => $ajaxresulall];
                return json_encode($ajaxresult, JSON_UNESCAPED_UNICODE);
            } else {
                echo "<option id=\"notFound\" class='option' value=\"ไม่พบข้อมูล'" . $resultnot . "'\" />";
            }

        } else {
            return "false method not post";
        }
    }


}