<?php
/**
 * Created by PhpStorm.
 * User: User
 * Date: 21/8/2560
 * Time: 17:23
 */

namespace app\modules\eoffice_materialsys\controllers;

use app\modules\eoffice_materialsys\models\FunDate;
use app\modules\eoffice_materialsys\models\MatsysBillMaster;
use app\modules\eoffice_materialsys\models\MatsysCompany;
use app\modules\eoffice_materialsys\models\MatsysBillDetail;
use app\modules\eoffice_materialsys\models\MatsysLocation;
use app\modules\eoffice_materialsys\models\MatsysMaterial;
use app\modules\eoffice_materialsys\models\MatsysMaterialType;

use app\modules\eoffice_materialsys\models\MatsysOrder;
use app\modules\eoffice_materialsys\models\MatsysOrderDetail;
use app\modules\eoffice_materialsys\models\MatsysOrderHasMaterial;
use app\modules\eoffice_materialsys\models\User;
use Yii;
use yii\db\Exception;
use yii\helpers\ArrayHelper;
use yii\web\Controller;
use yii\web\Response;
use yii\widgets\ActiveForm;


class InsertmaterialController extends Controller
{
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        \Yii::setAlias('@path_assetmodule', '@web/../modules/materialmanagement/assets');
        \Yii::setAlias('@path_component', '@web/../modules/materialmanagement/components/');
    }

    //Fix "unable to verify your data submission"
    public function beforeAction($action)
    {
        $this->enableCsrfValidation = false;
        return parent::beforeAction($action);
    }

    public function actionIndex()
    {
        return $this->redirect(['insertmaterial/create']);
    }

    public function actionCreatematerial()
    {
        $model_material_stock = new MatsysBillDetail();
        $model_material_stock2 = new MatsysBillDetail();
        $model_local = new MatsysLocation();
        if (\Yii::$app->request->post() && \Yii::$app->request->post('name')) {
            $material_id = \Yii::$app->request->post('name');
            $result_model = MatsysMaterial::findOne($material_id);
            $result_stock = MatsysBillDetail::find()->where($material_id)->sum('material_has_amount_use');
            $this->layout = false;
            return $this->render('_material_obj', ['material_model' => $result_model, 'amount' => $result_stock, 'model_stock' => $model_material_stock]);
        } else if (\Yii::$app->request->post() && $model_material_stock->load(\Yii::$app->request->post())) {
            try {
                $material_date = \Yii::$app->request->post('date');
                $material_company = \Yii::$app->request->post('company');
                $model_material_stock->load(\Yii::$app->request->post());
                $model_material_stock['company_id'] = 1;
                $model_material_stock['stock_id'] = 2;
                $model_material_stock->save(false);
                $this->layout = 'main_material';
                return $this->render('cake');
            } catch (Exception $e) {
                echo $e->getMessage();
            }
//            $this->layout = 'main_material';
//            return $this->render('cake');
        } else {
            return "else";
        }

    }

    public function actionSuccess()
    {
        $this->layout = 'main_material';
        return $this->render('cake');
    }

    public function actionCreate()
    {
        $path_name = "../web/web_mat/pdf/temp/";
        $file = scandir($path_name);
        foreach ($file as $key => $value) {
            if ($key >= 2) {
                unlink($path_name . $value);
            }
        }
        $model_company = ArrayHelper::map(MatsysCompany::find()->all(), 'company_id', 'company_name');
        $model_bill_master = new MatsysBillMaster();
        $this->layout = 'main_material';
        return $this->render('insertmaterialV2', ['model_bill_master' => $model_bill_master, 'model_company' => $model_company]);
    }

    //Ajax search material when input
    public function actionSearchmaterial()
    {
        if (\Yii::$app->request->post()) {
            $value = \Yii::$app->request->post("value");
            $resultnot = $value;
            $value = "%" . $value . "%";
            $result = MatsysMaterial::find()->where('material_name LIKE :value', [':value' => $value])->limit(10)->all();
            if ($result) {
                foreach ($result as $obj) {
                    echo "<option id=\"" . $obj["material_id"] . "\" value=\"" . $obj["material_name"] . "\">" . $obj["material_id"] . "</option>";
                }
            } else {
                echo "<option id=\"notFound\" class='option' value=\"ไม่พบข้อมูล'" . $resultnot . "'\" />";
            }
        } else {
            return $this->redirect(['index']);
        }
    }

    //Ajax search Material when input JSON
    public function actionSearchmaterialajax()
    {
        if (\Yii::$app->request->get()) {
            $value = \Yii::$app->request->get("value");
            if (!isset($value)) {
                $value = "------";
            }
            $ajaxresulall = [];
            $resultnot = $value;
            $value = "%" . $value . "%";
            $result = MatsysMaterial::find()
                ->where('material_name LIKE :value', [':value' => $value])
                ->orWhere('material_id LIKE :value', [':value' => $value])
                ->limit(10)->all();


            //JSON
            if ($result) {
                foreach ($result as $obj) {
                    $type = MatsysMaterialType::findOne($obj["material_type_id"]);
                    $location = MatsysLocation::findOne($obj["location_id"]);
                    $json_location = [
                        'location_id' => $location['location_id'],
                        'location_name' => $location['location_name']
                    ];
                    $json_type = [
                        'material_type_id' => $type["material_type_id"],
                        'material_type_name' => $type["material_type_name"]
                    ];
                    $ajaxresul_obj = [
                        'id' => $obj["material_id"],
                        'material_name' => $obj["material_name"],
                        'material_amount_check' => $obj["material_amount_check"],
                        'material_order_count' => $obj["material_order_count"],
                        'material_unit_name' => $obj["material_unit_name"],
                        'material_image' => $obj["material_image"],
                        'location' => $json_location,
                        'material_type' => $json_type,
                    ];
                    array_push($ajaxresulall, $ajaxresul_obj);
                }
                $ajaxresult = ['resultajax' => $ajaxresulall];
                return json_encode($ajaxresult, JSON_UNESCAPED_UNICODE);
            } else {
                echo "<option id=\"notFound\" class='option' value=\"ไม่พบข้อมูล'" . $resultnot . "'\" />";
            }

        } else {
            return "false method not post";
        }
    }

    //Ajax search Material when input JSON
    public function actionSearchuserjax()
    {
        if (\Yii::$app->request->get()) {
            $value = \Yii::$app->request->get("value");
            if (!isset($value)) {
                $value = "------";
            }
            $ajaxresulall = [];
            $resultnot = $value;
            $value = "%" . $value . "%";
            $result = User::find()
                ->where('id LIKE :value', [':value' => $value])
                ->orWhere('person_fname_th LIKE :value', [':value' => $value])
                ->orWhere('person_lname_th LIKE :value', [':value' => $value])
                ->limit(10)->all();


            //JSON
            if ($result) {
                foreach ($result as $obj) {
                    $ajaxresul_obj = [
                        'id' => $obj["id"],
                        'user_name' => $obj["PREFIXNAME"] . $obj["person_fname_th"] . " " . $obj["person_lname_th"],
                    ];
                    array_push($ajaxresulall, $ajaxresul_obj);
                }
                $ajaxresult = ['resultajax' => $ajaxresulall];
                return json_encode($ajaxresult, JSON_UNESCAPED_UNICODE);
            } else {
                echo "<option id=\"notFound\" class='option' value=\"ไม่พบข้อมูล'" . $resultnot . "'\" />";
            }

        } else {
            return "false method not post";
        }
    }

    //Ajax check material when click button
    public function actionChecksearchmaterial()
    {
        if (\Yii::$app->request->post()) {
            $session = \Yii::$app->session;
            $session->open();
            $search = \Yii::$app->request->post("value");
            if ($session['obj']) {
                $allobj = $session['obj'];
                foreach ($allobj as $key => $value) {
                    if ($value['material_id'] == $search) {
                        echo "find";
                        break;
                    }
                }
            }
        } else {
            return $this->redirect(['index']);
        }
    }

    //Ajax check upload file PDF
    public function actionCheckfile()
    {
        $path_name = "../web/web_mat/pdf/temp/";
        $file = scandir($path_name);
        foreach ($file as $key => $value) {
            if ($key >= 2) {
                echo "1";
            }
        }
    }

    //Ajax Delete file PDF
    public function actionDeletepdf()
    {
        $this->enableCsrfValidation = false;
        $filename = Yii::$app->request->post('filename');
        $path_name = "../web/web_mat/pdf/temp/" . $filename;
        if (unlink($path_name)) {
            echo "success";
        } else {
            echo "fail";
        }
    }

    //Ajax Check Valid
    public function actionCheckvalid()
    {
        $model_bill_master = new MatsysBillMaster();
        if (Yii::$app->request->isAjax && $model_bill_master->load(Yii::$app->request->post())) {
            Yii::$app->response->format = Response::FORMAT_JSON;
            return ActiveForm::validate($model_bill_master);
        }
    }

    //Ajax Preview
    public function actionPreview()
    {
        $model_bill_master = new MatsysBillMaster();
        $session = \Yii::$app->session;
        $session->open();
        $material_name = [];
        $this->layout = false;
        $path_name = "../web/web_mat/pdf/temp/";
        $filepdf = null;
        if (Yii::$app->request->post()) {
            $model_bill_master->load(Yii::$app->request->post());
            $company = Yii::$app->request->post('company');
            $file = scandir($path_name);
            foreach ($file as $key => $value) {
                if ($key >= 2) {
                    $filepdf = $value;
                }
            }
            foreach ($session['obj'] as $name => $value) {
                $material = MatsysMaterial::findOne($value['material_id']);
                array_push($material_name, $material);
            }
            return $this->render('_material_preview', ['model_bill_master' => $model_bill_master, 'filepdf' => $filepdf, 'model_name' => $material_name, 'model_detail' => $session['obj'], 'company' => $company]);
        }
        $session->close();
    }


    //Ajax Preview
    public function actionPreviewpass()
    {
        $model_bill_master = new MatsysBillMaster();
        $session = \Yii::$app->session;
        $session->open();
        $material_name = [];
        $this->layout = false;
        $path_name = "../web/web_mat/pdf/temp/";
        $filepdf = null;
        if (Yii::$app->request->post()) {
            $model_bill_master->load(Yii::$app->request->post());
            $company = Yii::$app->request->post('company');
            $id_user = Yii::$app->request->post('id_user');
            $order_detail = Yii::$app->request->post('order_detail');
            $order_detail_name = Yii::$app->request->post('order_detail_name');
            $order_detail_name_id = Yii::$app->request->post('order_detail_name_id');
            $file = scandir($path_name);
            foreach ($file as $key => $value) {
                if ($key >= 2) {
                    $filepdf = $value;
                }
            }
            foreach ($session['obj'] as $name => $value) {
                $material = MatsysMaterial::findOne($value['material_id']);
                array_push($material_name, $material);
            }
            return $this->render('_material_preview_pass',
                [
                    'model_bill_master' => $model_bill_master,
                    'filepdf' => $filepdf,
                    'model_name' => $material_name,
                    'model_detail' => $session['obj'],
                    'company' => $company,
                    'id_user' => $id_user,
                    'order_detail' => $order_detail,
                    'order_detail_name' => $order_detail_name,
                    'order_detail_name_id' => $order_detail_name_id
                ]
            );
        }

        $session->close();
    }

    //Save to DataBase
    public function actionSavematerial()
    {
        $model_bill_master = new MatsysBillMaster();
        $session = \Yii::$app->session;
        $session->open();
        $this->layout = false;
        $path_name = "../web/web_mat/pdf/temp/";
        $path_success_name = "../web/web_mat/pdf/success/";
        $filepdf = null;
        if (Yii::$app->request->post()) {
            if (Yii::$app->request->post('mat_pass')) {
                $person_ap = Yii::$app->user->identity->getId();
                $order_detail = Yii::$app->request->post('order_detail');
                $order_detail_name = Yii::$app->request->post('order_detail_name');
                $order_detail_name_id = Yii::$app->request->post('order_detail_name_id');
                $detail_id = Yii::$app->request->post('detail_id');
                $id_user = Yii::$app->request->post('id_user');
                $temp_detail_id = explode("D3",$detail_id);
                $detail_id_success = "D".$temp_detail_id[1];
                //set pdf name
                $file = scandir($path_name);
                foreach ($file as $key => $value) {
                    if ($key >= 2) {
                        $filepdf = $value;
                    }
                }
                $model_bill_master->load(Yii::$app->request->post());
                list($day, $month, $year) = explode("/", $model_bill_master['bill_master_date']);
                $model_bill_master['bill_master_date'] = $year . "-" . $month . "-" . $day;
                $model_bill_master['bill_master_pdf'] = $model_bill_master['bill_master_id'];
                $new_pdf = $model_bill_master['bill_master_id'];
                copy($path_name . $filepdf, $path_success_name . $new_pdf . '.pdf');

                $person_id = $id_user;
                $model_detail_order = new MatsysOrderDetail();
                $model_detail_order->order_detail_id = FunDate::genOrderdetailid($person_id);
                $model_detail_order->order_detail = $order_detail;
                $model_detail_order->order_detail_name = $order_detail_name;
                $model_detail_order->order_detail_name_id = $order_detail_name_id;
                $model_detail_order->detail_id = $detail_id_success;
                $model_detail_order->save(false);

                date_default_timezone_set("Asia/Bangkok");
                $date = date('Y-m-d G:i:s');

                $model_order = new MatsysOrder();
                $model_order->order_id = FunDate::genBillId($person_id);
                $model_order->person_id = $person_id;
                $model_order->order_date = $date;
                $model_order->order_staff = $person_ap;
                $model_order->order_status = '1';
                $model_order->order_status_confirm = 'confirm';
                $model_order->order_status_notification = 'notread';
                $model_order->order_status_return = '0';
                $model_order->order_budget_per_year = FunDate::getBudgetyear();
                $model_order->order_cancel_description = '-';
                $model_order->order_detail_id = $model_detail_order->order_detail_id;
                $model_order->save(false);

                try {
                    $model_bill_master->save(false);
                    echo 'success';
                    foreach ($session['obj'] as $name => $bill_detail) {
                        $model_order_items = MatsysOrder::find()
                        ->where('order_id = :order_id',[':order_id'=>$model_order->order_id])
                        ->one();
                        $item = new MatsysOrderHasMaterial();
                        $counter_temp = MatsysBillDetail::find()
                            ->where('material_id LIKE :value', [':value' => $bill_detail['material_id']])
                            ->orderBy(['bill_detail_counter' => SORT_DESC])
                            ->one();
                        $count = 0;
                        if ($counter_temp != null) {
                            $count = $counter_temp['bill_detail_counter'] + 1;
                        }
                        $model_bill_detail = new MatsysBillDetail();
                        $model_bill_detail['material_id'] = $bill_detail['material_id'];
                        $model_bill_detail['bill_master_id'] = $model_bill_master['bill_master_id'];
                        $model_bill_detail['bill_detail_price_per_unit'] = $bill_detail['bill_detail_price_per_unit'];
                        $model_bill_detail['bill_detaill_amount'] = $bill_detail['bill_detaill_amount'];
                        $model_bill_detail['bill_detail_use_amount'] = 0;
                        $model_bill_detail['bill_detail_counter'] = $count;
                        $model_bill_detail->save(false);
                        $item->material_amount = $bill_detail['bill_detaill_amount'];
                        $item->material_amount_receive = $bill_detail['bill_detaill_amount'];
                        $item->order_id_ai = $model_order_items->order_id_ai;
                        $item->order_id = $model_order_items->order_id;
                        $item->material_id = $bill_detail['material_id'];
                        $item->bill_master_id = $model_bill_master['bill_master_id'];
                        $item->save(false);
                        $session->remove('obj');
                    }
                } catch (Exception $e) {
                    echo $e->getMessage();
                }
            } else {
                //set pdf name
                $file = scandir($path_name);
                foreach ($file as $key => $value) {
                    if ($key >= 2) {
                        $filepdf = $value;
                    }
                }
                $model_bill_master->load(Yii::$app->request->post());
                list($day, $month, $year) = explode("/", $model_bill_master['bill_master_date']);
                $model_bill_master['bill_master_date'] = $year . "-" . $month . "-" . $day;
                $model_bill_master['bill_master_pdf'] = $model_bill_master['bill_master_id'];
                $new_pdf = $model_bill_master['bill_master_id'];
                copy($path_name . $filepdf, $path_success_name . $new_pdf . '.pdf');
                try {
                    $model_bill_master->save(false);
                    echo 'success';
                    foreach ($session['obj'] as $name => $bill_detail) {
                        $counter_temp = MatsysBillDetail::find()->where('material_id LIKE :value', [':value' => $bill_detail['material_id']])->orderBy(['bill_detail_counter' => SORT_DESC])->one();
                        $count = 0;
                        if ($counter_temp != null) {
                            $count = $counter_temp['bill_detail_counter'] + 1;
                        }
                        $model_bill_detail = new MatsysBillDetail();
                        $model_bill_detail['material_id'] = $bill_detail['material_id'];
                        $model_bill_detail['bill_master_id'] = $model_bill_master['bill_master_id'];
                        $model_bill_detail['bill_detail_price_per_unit'] = $bill_detail['bill_detail_price_per_unit'];
                        $model_bill_detail['bill_detaill_amount'] = $bill_detail['bill_detaill_amount'];
                        $model_bill_detail['bill_detail_use_amount'] = $bill_detail['bill_detail_use_amount'];
                        $model_bill_detail['bill_detail_counter'] = $count;
                        $model_bill_detail->save(false);
                        $session->remove('obj');
                    }
                } catch (Exception $e) {
                    echo $e->getMessage();
                }
            }
        }
        $session->close();
    }

    //Cancel Bill
    public function actionCancelbill()
    {
        $session = \Yii::$app->session;
        $session->open();
        $session->remove('obj');
        $session->close();
    }

    //Create material to stock order
    public function actionCreatematerialtostock()
    {
        $this->layout = false;
        $material_instock_new = new MatsysBillDetail();
        if (\Yii::$app->request->post()) {
            $value = \Yii::$app->request->post("value");
            $result = MatsysMaterial::find()->where('material_id = :value', [':value' => $value])->limit(10)->all();
            $amount_use = MatsysBillDetail::find()->where("material_id = :userid ", [':userid' => $result[0]['material_id']])->sum('bill_detail_use_amount');
            return $this->render('_material_obj_V3', ['model' => $result[0], 'model_stock' => $material_instock_new, 'amount_use' => $amount_use]);
        } else {
            return $this->redirect(['index']);
        }
    }

    //Add Material to Session
    public function actionCreatematerialsession()
    {
        $material_has_stock = new MatsysBillDetail();
        $session = \Yii::$app->session;
        if (\Yii::$app->request->isAjax) {
            $session->open();
            if ($session['obj']) {
                $allobj = $session['obj'];
            } else {
                $allobj = array();
            }

            //get value
            $material_has_stock['material_id'] = \Yii::$app->request->post("mat_id");
            $material_has_stock['bill_detail_price_per_unit'] = \Yii::$app->request->post("price_unit");
            $material_has_stock['bill_detaill_amount'] = \Yii::$app->request->post("amount");
            $material_has_stock['bill_detail_use_amount'] = \Yii::$app->request->post("amount");

//            try{
//                $material_has_stock->save(false);
//            }catch (Exception $e){
//                echo $e->getMessage();
//            }

            array_push($allobj, $material_has_stock);
            $session['obj'] = $allobj;

//            foreach ($session['obj'] as $name => $value){
//                echo $value['material_id']."\n";
//            }
            echo "1";
            $session->close();
        } else {
            return $this->redirect(['index']);
        }
    }

    //Show List Material
    public function actionListmaterial()
    {
        $session = \Yii::$app->session;
        $session->open();
        $this->layout = false;
        $amountlist = 0;
        $allprice = 0;
        $model_materials = [];
        if ($session['obj']) {
            foreach ($session['obj'] as $name => $value) {
                $material = MatsysMaterial::findOne($value['material_id']);
                $allprice += $value['bill_detail_price_per_unit'] * $value['bill_detaill_amount'];
                $amountlist++;
                $model_item = [
                    'material'=>'',
                    'value'=>'',
                    'count'=>''
                ];
                $model_item['material'] =$material;
                $model_item['value'] =$value;
                $model_item['count'] = $name;
                array_push($model_materials,$model_item);
            }
            return $this->render('_material_list', [
                'model' => $model_materials,
                'amountlist' => $amountlist,
                'allprice' => $allprice
            ]);
        } else {
            echo "<div class='pleaseenter' data-toggle=\"modal\"
                data-target=\"#ModalInsert\"><h2>กรุณาเพิ่มวัสดุ</h2></div>";
        }
        $session->close();
    }

    //Delete item
    public function actionDeleteitem()
    {
        $session = \Yii::$app->session;
        $session->open();
        $this->layout = false;

        $amountlist = 0;
        $allprice = 0;
        $id = \Yii::$app->request->post("id");
        $result = $session['obj'];
        foreach ($result as $name => $value) {
            if (strcmp($name, $id) === 0) {
                unset($result[$id]);
            }
        }
        $session['obj'] = $result;
//        foreach ($session['obj'] as $name => $value) {
//            $material = MatsysMaterial::findOne($value['material_id']);
//            echo $this->render('_material_list', ['model' => $value, 'name' => $material, 'count' => $name]);
//            $allprice += $value['bill_detail_price_per_unit'] * $value['bill_detaill_amount'];
//            $amountlist++;
//        }
//        if ($session['obj']) {
//            echo "<input type='hidden' id='valueamount' value='" . $amountlist . "'>";
//            echo "<input type='hidden' id='priceoutput' value='" . $allprice . "'>";
//        } else {
//            echo "<input type='hidden' id='valueamount' value='" . $amountlist . "'>";
//            echo "<input type='hidden' id='priceoutput' value='" . $allprice . "'>";
//            echo "<div class='pleaseenter' data-toggle=\"modal\"
//                data-target=\"#ModalInsert\"><h2>กรุณาเพิ่มวัสดุ</h2></div>";
//        }

        $session->close();
    }

    //Edit item
    public function actionEditlist()
    {
        $session = \Yii::$app->session;
        $session->open();

        $id_session = \Yii::$app->request->post("id");
        $result = $session['obj'];
        $this->layout = false;

        foreach ($result as $name => $value) {
            if (strcmp($id_session, $name) === 0) {
                $model_material = MatsysMaterial::findOne($value['material_id']);
                $amount_use = MatsysBillDetail::find()->where("material_id = :id ", [':id' => $value['material_id']])->sum('bill_detail_use_amount');
                echo $this->render('_material_edit', ['count' => $id_session, 'model_material' => $value, 'amount_use' => $amount_use, 'material' => $model_material]);
            }
        }
        $session->close();
    }

    //Confirm Edit item
    public function actionConfirmedit()
    {
        $material_has_stock = new MatsysBillDetail();
        if (\Yii::$app->request->post()) {
            $session = \Yii::$app->session;
            $session->open();
            $this->layout = false;
            $count = \Yii::$app->request->post('count_edit');
            //get value
            $material_has_stock['material_id'] = \Yii::$app->request->post("mat_id_edit");
            $material_has_stock['bill_detail_price_per_unit'] = \Yii::$app->request->post("price_unit_edit");
            $material_has_stock['bill_detaill_amount'] = \Yii::$app->request->post("amount_edit");
            $material_has_stock['bill_detail_use_amount'] = \Yii::$app->request->post("amount_edit");

            $result = $session['obj'];

            foreach ($result as $name => $value) {
                if (strcmp($count, $name) === 0) {
                    $result[$count] = $material_has_stock;
                }
            }
            $session['obj'] = $result;

            $session->close();
        } else {
            return $this->redirect(['index']);
        }
    }

    public function actionCommitstock()
    {
        $session = \Yii::$app->session;
        $session->open();
        $result = $session['obj'];
        if ($session['obj']) {
            foreach ($result as $name => $value) {
                $value->save();
            }
            echo "<div class=\"alert alert-success\" role=\"alert\">ทำรายการสำเร็จ</div>";
        } else {
            echo "error";
        }
        $session->destroy();
        $session->close();
    }

    public function actionTestsearch()
    {
        return $this->render('cake');
    }

    // DropFIle Insert
    public function actionDropfile()
    {
        $this->layout = 'main_material';
        return $this->render('insertmaterial_dropfile');
    }

    //Upload PDF
    public function actionUpfile()
    {
        $fileName = 'file';
        $uploadPath = '../web/web_mat/pdf/temp/';
        $session = Yii::$app->session;
        $session->open();

        if (isset($_FILES[$fileName])) {
            $file = \yii\web\UploadedFile::getInstanceByName($fileName);
            if ($file->saveAs($uploadPath . '/' . $file->name)) {
                //Now save file data to database
                echo "true";
                echo \yii\helpers\Json::encode($file);
            } else {
                echo "false";
            }
        }
        return false;
    }

    //Delete PDF
    public function actionDeletexml()
    {
        $this->enableCsrfValidation = false;
        $filename = Yii::$app->request->post('filename');
        $path_name = "../web/web_mat/pdf/" . $filename;
        if (unlink($path_name)) {
            echo "success";
        } else {
            echo "fail";
        }

    }
}